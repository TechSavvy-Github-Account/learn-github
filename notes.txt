story : imagine in a wedding and there are guests waiting to get their pic clicked with couple.
  Guests who are on stag are called to be on staging area.
  when pic is clicked its saved. Thus commited a change.

1) ls, ls -a [list all files]
2) ls <folder name>
3) mkdir folder_name [creates folder]

4) git status to check untracked files 
5) git add . 
  git add <file_name>

  to add files to staging area

6) cat names.txt 
  displays content of file names.txt

7) git restore --staged names.txt
  removes names.txt from staging area

8)git log
 history of commits

9) git reset <id of commit>
  all the commits above it or all the commits newer as comapared to the id mentioned will be deleted 
  or you can say they will be unstaged. ie not on staging area anymore.
  Now means their pics are deleted.

10) now imagine after a commit you made some changes but you dont want to commit the current changes.
  use git stash. It will put the current folder structure behind the stage.
  and use git stash pop [stash files come back]
  git stash clear [now stash files are deleted PERMANENTLY]

  git stash pop wont take you back to previous commit rather it will just bring back untracked files back.

11)Git remote add origin <url>
  this is used to connect remote file with code.

12)git remote -v 
  to look for all the urls attached.

13)git branch feature
  new brach feature created

14)git checkout feature 
  now head on feature branch

15)git remote add upstream <url>
add upstream url

16)create a new branch in forked copy. Add upstream url
  Now idea is to make changes in our forked copy and that too in a branch other than main.
  then merge this new branch with original proj main branch through a pull req.

17)One branch can create only 1 pull request.
  All the new commits will be commited in the first PR rather than creating a new PR.

18)Force push use a -f flag when latest commit of online branch is diff than local branch.

19)sync fork with main repo
  first git checkout main
  2 ways : 
  1)using fetch upstream button present on the github
  2)git fetch --all --prune
  prune fetches all the deleted commits as well

  3) git reset --hard upstream/master

  now local master will be same as organisations master branch

20)git pull upstream main
  this also does the same thing as done by all commands in step 19.
  

21)eg 4 commits : and 4 being the most recent one.
  4
  3
  2
  1

Always make the main branch up to date before creating a branch.
if we want to merge all commits.
We can reset the commit 1. Now all the commits above it are unstaged. 
We can commit all of them into a single commit as 2.

21)Git rebase :
  suppose the prev example
  4
  3
  2
  1

  we want to merge only 2 and 3 in 1. So we'll use
  git rebase -i <id of 1>
  -i means interactive

  The commits are rearranged in reverse order

  pick 1
  pick 2
  pick 3
  pick 4
  pick 5

  we'll be provided this choice. Now we may pick or squash the commits.
  NOTE : Line will be executed from top to bottom

  pick 1
  s 2
  s 3
  pick 4
  s 5

  2 3 will be merged with 1
  and 5 with 4

  to exit use command  
  esc : x

22)Squashing Commits : 


